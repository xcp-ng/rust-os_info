name: CI

on: [pull_request, push]

jobs:
  # Code formatting.
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          profile: minimal
          override: true
      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Static analyzer.
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          profile: minimal
          override: true
      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D warnings

  # Security audit.
  audit:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Check links in the documentation.
  deadlinks:
    name: Deadlinks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Install deadlinks
        run: cargo install cargo-deadlinks
      - name: Cargo doc
        run: cargo doc --no-deps -p os_info
      - name: Run deadlinks
        run: cargo deadlinks --no-build

  # Check links in markdown files.
  mlc:
    name: MLC
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Markup Link Checker (mlc)
        uses: becheran/mlc@v0.14.3

  # Spellcheck.
  spellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: streetsidesoftware/cspell-action@v1.0.1
        with:
          files: "**/*.{rs,md}"

  # Markdown formatting.
  markdown:
    name: Markdown lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Check md files
        uses: nosborn/github-action-markdown-cli@v1.1.1
        with:
          files: .

  # cargo-deny.
  deny:
    name: cargo-deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1

  # Tests.
  test:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: Linux
            os: ubuntu-latest
          - build: macOS
            os: macOS-latest
          - build: Win32-msvc
            os: windows-latest
            rust: stable-i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - build: Win32-gnu
            os: windows-latest
            rust: stable-i686-pc-windows-gnu
            target: i686-pc-windows-gnu
          - build: Win64-msvc
            os: windows-latest
            rust: stable-x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - build: Win64-gnu
            os: windows-latest
            rust: stable-x86_64-pc-windows-gnu
            target: x86_64-pc-windows-gnu
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust || 'stable' }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --examples --all
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all
